package UC.Client;

import java.awt.Color;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import static java.lang.Integer.parseInt;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.SwingWorker;

/**
 * Client asks the number of iterations and receive the number of avogrado with
 * the iterations asked
 *
 * @author Ant√≥nio Ramos and Miguel Silva
 */
public class Client extends javax.swing.JFrame {

    private int click = 0;

    private int numberOfRequests;
    private int id;
    private int portId;
    private int numberOfRequestsRejected;
    private Socket connectedSocket;
    private boolean infiniteWhile = true;
    HashMap<Integer, String> allPendingRequests;
    HashMap<Integer, String> allExecutedRequests;
    ArrayList<String> allExecutedRequestsList = new ArrayList<>();

    /**
     * Constructor of Client
     *
     * @throws IOException
     */
    public Client() throws IOException {
        initComponents();
        CONNECTIONREADYLabel.setVisible(false);
        helpTXT.setVisible(false);
        helpTXT2.setVisible(false);
        helpTXT3.setVisible(false);
        helpTXT4.setVisible(false);
        helpTXT5.setVisible(false);
        helpTXT6.setVisible(false);
        helpTXT7.setVisible(false);
        helpTXT8.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ConBut = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        IDLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        PORTTextField = new javax.swing.JTextField();
        CONNECTIONREADYLabel = new javax.swing.JLabel();
        ReqBut = new javax.swing.JButton();
        DiscBut = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        EXECUTEDTEXTAREA = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        PENDINGTEXTAREA = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        niter = new javax.swing.JTextField();
        pendRequests = new javax.swing.JLabel();
        exProcess = new javax.swing.JLabel();
        helpBtn = new javax.swing.JButton();
        helpTXT2 = new javax.swing.JLabel();
        helpTXT3 = new javax.swing.JLabel();
        helpTXT4 = new javax.swing.JLabel();
        helpTXT = new javax.swing.JLabel();
        helpTXT5 = new javax.swing.JLabel();
        helpTXT6 = new javax.swing.JLabel();
        helpTXT7 = new javax.swing.JLabel();
        helpTXT8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ConBut.setBackground(java.awt.Color.green);
        ConBut.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        ConBut.setText("Connect");
        ConBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConButActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        jLabel1.setText("CLIENT");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Client ID:");

        IDLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        IDLabel.setText("Waiting");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Ip/Port:");

        PORTTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        PORTTextField.setText("7777");

        CONNECTIONREADYLabel.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        CONNECTIONREADYLabel.setForeground(new java.awt.Color(0, 100, 0));
        CONNECTIONREADYLabel.setText("ONLINE!");

        ReqBut.setBackground(java.awt.Color.cyan);
        ReqBut.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        ReqBut.setText("Request");
        ReqBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReqButActionPerformed(evt);
            }
        });

        DiscBut.setBackground(java.awt.Color.red);
        DiscBut.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        DiscBut.setText("Disconnect");
        DiscBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DiscButActionPerformed(evt);
            }
        });

        EXECUTEDTEXTAREA.setColumns(20);
        EXECUTEDTEXTAREA.setRows(5);
        jScrollPane1.setViewportView(EXECUTEDTEXTAREA);

        PENDINGTEXTAREA.setColumns(20);
        PENDINGTEXTAREA.setRows(5);
        jScrollPane2.setViewportView(PENDINGTEXTAREA);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Pending Requests:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Executed Process:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Niter:");

        niter.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        niter.setText("4");

        pendRequests.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        pendRequests.setText("0");

        exProcess.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        exProcess.setText("0");

        helpBtn.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        helpBtn.setText("Help");
        helpBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpBtnActionPerformed(evt);
            }
        });

        helpTXT2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        helpTXT2.setText("To start, click");

        helpTXT3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        helpTXT3.setText("To offline, click");
        helpTXT3.setToolTipText("");

        helpTXT4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        helpTXT4.setText("Ask, requests to LB");

        helpTXT.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        helpTXT.setText("Valid >= 1");

        helpTXT5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        helpTXT5.setText("= Load Balancer");

        helpTXT6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        helpTXT6.setText("clientID|requestID|00|01|Niter|0| ");

        helpTXT7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        helpTXT7.setText("success: clientID|requestID|serverID|02|Niter|NA| ");

        helpTXT8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        helpTXT8.setText("error: clientID|requestID|serverID|03|Niter|0| ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(IDLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(CONNECTIONREADYLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(helpBtn, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(helpTXT6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                        .addComponent(jLabel3)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jLabel6)
                                                        .addGap(21, 21, 21)))
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addComponent(niter)
                                                    .addComponent(PORTTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addComponent(helpTXT5))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(ConBut, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(helpTXT2)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(54, 54, 54)
                                        .addComponent(helpTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(helpTXT3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(10, 10, 10))
                                    .addComponent(DiscBut, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(ReqBut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(helpTXT4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(helpTXT8)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(pendRequests, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(65, 65, 65)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(exProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(helpTXT7))
                        .addContainerGap(33, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CONNECTIONREADYLabel)
                        .addGap(1, 1, 1)
                        .addComponent(helpBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(IDLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(helpTXT5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(PORTTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(niter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addComponent(helpTXT))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(helpTXT4, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(helpTXT2)
                                .addComponent(helpTXT3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ConBut)
                            .addComponent(DiscBut)
                            .addComponent(ReqBut))
                        .addGap(44, 44, 44)))
                .addGap(9, 9, 9)
                .addComponent(helpTXT7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(helpTXT6)
                    .addComponent(helpTXT8))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(pendRequests))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(exProcess)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Request number of avogrado
     *
     * @param evt
     */

    private void ReqButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReqButActionPerformed
        if (this.connectedSocket == null) {
            return;
        }

        int iteracions = Integer.parseInt(niter.getText());
        if (iteracions >= 1) {
            ClientRequest clientRequest = new ClientRequest(pendRequests, this.numberOfRequests, this.id, iteracions, portId, allPendingRequests, PENDINGTEXTAREA);
            clientRequest.start();
        } else {
            helpTXT.setForeground(Color.red);
            helpTXT.setVisible(true);
        }

        this.numberOfRequests++;
    }//GEN-LAST:event_ReqButActionPerformed

    /**
     * Disconnect client from loadBalance set all parameters to zero
     *
     * @param evt
     */

    private void DiscButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DiscButActionPerformed
        if (this.connectedSocket == null) {
            return;
        }
        try {
            this.connectedSocket.close();
        } catch (IOException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
        CONNECTIONREADYLabel.setForeground(Color.yellow);
        CONNECTIONREADYLabel.setText("Disconnected");
        CONNECTIONREADYLabel.setVisible(true);
        numberOfRequests = 0;
        numberOfRequestsRejected = 0;
        IDLabel.setText("Waiting");
        allPendingRequests = null;
        allExecutedRequests = null;
        PENDINGTEXTAREA.setText(" ");
        EXECUTEDTEXTAREA.setText(" ");
        pendRequests.setText("0");
        exProcess.setText("0");
        this.connectedSocket = null;
        infiniteWhile = false;
    }//GEN-LAST:event_DiscButActionPerformed

    /**
     * Connects to load balancer and receive a id
     *
     * @param evt
     */
    private void ConButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConButActionPerformed

        if (this.connectedSocket != null) {
            //To avoid spamming connect key
            return;
        }

        SwingWorker worker = new SwingWorker<Boolean, Integer>() {

            @Override
            protected Boolean doInBackground() throws Exception {
                portId = parseInt(PORTTextField.getText());
                Socket s;
                try {
                    s = new Socket("localhost", portId);
                } catch (IOException ex) {
                    Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                    System.out.println("No LoadBalancer Found on Port " + portId);
                    CONNECTIONREADYLabel.setForeground(Color.red);
                    CONNECTIONREADYLabel.setText("Error Connecting to Ip/Port");
                    CONNECTIONREADYLabel.setVisible(true);
                    connectedSocket = null;
                    return false;
                }
                CONNECTIONREADYLabel.setForeground(new java.awt.Color(0, 100, 0));
                CONNECTIONREADYLabel.setText("ONLINE!");
                CONNECTIONREADYLabel.setVisible(true);
                connectedSocket = s;
                allPendingRequests = new HashMap<>();
                allExecutedRequests = new HashMap<>();

                // get the output stream from the socket.
                OutputStream outputStream = null;
                try {
                    outputStream = s.getOutputStream();
                } catch (IOException ex) {
                    Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                }
                InputStream inputStream = null;
                try {
                    inputStream = s.getInputStream();
                } catch (IOException ex) {
                    Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
                }

                // create a data output stream from the output stream so we can send data through it
                DataOutputStream dataOutputStream = new DataOutputStream(outputStream);
                DataInputStream dataInputStream = new DataInputStream(inputStream);
                String request = "ImAliveClient";
                System.out.println("Sending ImAlive to LoadBalancer");

                try {
                    dataOutputStream.writeUTF(request);
                    dataOutputStream.flush();
                    String str = dataInputStream.readUTF();
                    String[] arrOfStr = str.split(";", -2);
                    if (!arrOfStr[1].equals("Client")) {
                        System.out.println("MISTAKE-SERVER PORT");
                        CONNECTIONREADYLabel.setForeground(Color.red);
                        CONNECTIONREADYLabel.setText("Error/Dont Pick Server Port");
                        CONNECTIONREADYLabel.setVisible(true);
                        connectedSocket = null;
                        return false;
                    }
                    id = parseInt(arrOfStr[0]);
                    System.out.println("My Id is->" + id);
                    IDLabel.setText(String.valueOf(id));
                } catch (IOException e) {
                }

                infiniteWhile = true;

                while (infiniteWhile) {
                    //Receber Requests!
                    String requestInfo = dataInputStream.readUTF();
                    String[] arrOfStr = requestInfo.split(Pattern.quote("|"), -2);
                    allPendingRequests.remove(parseInt(arrOfStr[1]));
                    System.out.println(allPendingRequests.toString());
                    allExecutedRequestsList.add(requestInfo);
                    allExecutedRequests.put(parseInt(arrOfStr[1]), requestInfo);
                    System.out.println(allExecutedRequestsList.size() + "--");
                    if (!allPendingRequests.isEmpty()) {
                        StringBuilder newTextArea = new StringBuilder();
                        allPendingRequests.keySet().forEach(key -> {
                            newTextArea.append("Request-")
                                    .append(key)
                                    .append(" : ")
                                    .append(allPendingRequests.get(key))
                                    .append("\n");
                        });

                        PENDINGTEXTAREA.setText(newTextArea.toString());
                    } else {
                        PENDINGTEXTAREA.setText("");
                    }
                    StringBuilder newTextArea2 = new StringBuilder();
                    pendRequests.setText(String.valueOf(allPendingRequests.size()));

                    exProcess.setText(String.valueOf(allExecutedRequests.size()));
                    for (int i = 0; i < allExecutedRequestsList.size(); i++) {
                        newTextArea2.append("Request-")
                                .append(allExecutedRequestsList.get(i)+"\n");
                    }

                    EXECUTEDTEXTAREA.setText(newTextArea2.toString());
                    System.out.println("CLIENT->" + requestInfo);
                }

                return true;
            }

            protected void process(Integer chunks) {
            }

            @Override
            protected void done() {
            }
        };
        worker.execute();
    }//GEN-LAST:event_ConButActionPerformed

    private void helpBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpBtnActionPerformed
        if (click == 0) {
            helpTXT.setVisible(true);
            helpTXT2.setVisible(true);
            helpTXT3.setVisible(true);
            helpTXT4.setVisible(true);
            helpTXT5.setVisible(true);
            helpTXT6.setVisible(true);
            helpTXT7.setVisible(true);
            helpTXT8.setVisible(true);
            click++;
        } else {
            helpTXT.setVisible(false);
            helpTXT2.setVisible(false);
            helpTXT3.setVisible(false);
            helpTXT4.setVisible(false);
            helpTXT5.setVisible(false);
            helpTXT6.setVisible(false);
            helpTXT7.setVisible(false);
            helpTXT8.setVisible(false);
            click = 0;
        }
    }//GEN-LAST:event_helpBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new Client().setVisible(true);
            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CONNECTIONREADYLabel;
    private javax.swing.JButton ConBut;
    private javax.swing.JButton DiscBut;
    private javax.swing.JTextArea EXECUTEDTEXTAREA;
    private javax.swing.JLabel IDLabel;
    private javax.swing.JTextArea PENDINGTEXTAREA;
    private javax.swing.JTextField PORTTextField;
    private javax.swing.JButton ReqBut;
    private javax.swing.JLabel exProcess;
    private javax.swing.JButton helpBtn;
    private javax.swing.JLabel helpTXT;
    private javax.swing.JLabel helpTXT2;
    private javax.swing.JLabel helpTXT3;
    private javax.swing.JLabel helpTXT4;
    private javax.swing.JLabel helpTXT5;
    private javax.swing.JLabel helpTXT6;
    private javax.swing.JLabel helpTXT7;
    private javax.swing.JLabel helpTXT8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField niter;
    private javax.swing.JLabel pendRequests;
    // End of variables declaration//GEN-END:variables
}
