package UC.LoadBalancer;

import java.awt.Color;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import static java.lang.Integer.parseInt;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingWorker;

/**
 * Responsible to handle, connections, requests, replies 
 * Saves information about clients connected and servers 
 * Main socket server from all process (Monitor, Client, Server)
 * @author Ant√≥nio Ramos and Miguel Silva
 */

public class LoadBalancer extends javax.swing.JFrame {
    private int click = 0;

    private int numberOfClients = 0;
    private int numberOfServers = 0;
    private int serverPort;
    private int serverPortServer;
    private int serverPortMonitor;
    private Socket serverSocketClient;
    private Socket serverSocketMonitor;
    HashMap<Integer, Socket> allServerSocketsConnected = new HashMap<>();
    //HashTable so main LB thread can access all the threads that are waiting for requests of each server
    HashMap<Integer, LoadBalancerRequestReceiver> allServerReceiverThreads = new HashMap<>();
    HashMap<Integer, Socket> allClientsSocketsConnected = new HashMap<>();

    //HashTable that contains all the requests on each server!
    HashMap<Integer, ArrayList> allRequestsOnEachServer = new HashMap<>();

    /*
    * Constructor of Load Balencer
    * @throws IOException
    */
    public LoadBalancer() throws IOException {
        initComponents();
        STATUSLabel.setVisible(false);
        helpTXT.setVisible(false);
        helpTXT2.setVisible(false);
        helpTXT3.setVisible(false);
        helpTXT4.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        connectBTN = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        PORTTextField = new javax.swing.JTextField();
        STATUSLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        SERVERPORTTextField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        SERVERSTEXTAREA = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        CLIENTSTEXTAREA = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        MONITORPORTTextField = new javax.swing.JTextField();
        nServers = new javax.swing.JLabel();
        nClients = new javax.swing.JLabel();
        helpBtn = new javax.swing.JButton();
        helpTXT = new javax.swing.JLabel();
        helpTXT4 = new javax.swing.JLabel();
        helpTXT2 = new javax.swing.JLabel();
        helpTXT3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        connectBTN.setBackground(java.awt.Color.green);
        connectBTN.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        connectBTN.setText("Connect");
        connectBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectBTNActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial Black", 0, 18)); // NOI18N
        jLabel1.setText("LOAD BALANCER");
        jLabel1.setPreferredSize(new java.awt.Dimension(175, 26));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Client Port:");

        PORTTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        PORTTextField.setText("7777");

        STATUSLabel.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        STATUSLabel.setForeground(new java.awt.Color(0, 100, 0));
        STATUSLabel.setText("ONLINE!");
        STATUSLabel.setPreferredSize(new java.awt.Dimension(68, 18));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Server Port:");

        SERVERPORTTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        SERVERPORTTextField.setText("8888");

        SERVERSTEXTAREA.setColumns(20);
        SERVERSTEXTAREA.setRows(5);
        jScrollPane2.setViewportView(SERVERSTEXTAREA);

        CLIENTSTEXTAREA.setColumns(20);
        CLIENTSTEXTAREA.setRows(5);
        jScrollPane4.setViewportView(CLIENTSTEXTAREA);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Connected Servers:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Connected Clients:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Monitor Port:");

        MONITORPORTTextField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        MONITORPORTTextField.setText("6666");

        nServers.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nServers.setText("0");

        nClients.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nClients.setText("0");

        helpBtn.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        helpBtn.setText("Help");
        helpBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpBtnActionPerformed(evt);
            }
        });

        helpTXT.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        helpTXT.setText("This process is main process");

        helpTXT4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        helpTXT4.setText("To start, click");

        helpTXT2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        helpTXT2.setText("Before starting other processes, this must be online.");

        helpTXT3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        helpTXT3.setText("If you want to change the ports, make sure, the respectful guis, are the same.");
        helpTXT3.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(13, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(13, 13, 13))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(helpBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(STATUSLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(PORTTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(helpTXT4, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(SERVERPORTTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(connectBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(MONITORPORTTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(helpTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(helpTXT2, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(nServers, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(nClients, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 386, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 386, Short.MAX_VALUE))
                    .addComponent(helpTXT3, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(PORTTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(helpTXT4)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(SERVERPORTTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(connectBTN))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(STATUSLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(helpBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MONITORPORTTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addComponent(helpTXT)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(helpTXT2)
                .addGap(7, 7, 7)
                .addComponent(helpTXT3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(nServers))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(nClients))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Open all sockets servers, to permit connection from other units 
     * @param evt 
     */
    
    private void connectBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectBTNActionPerformed

        if (serverSocketClient != null) {
            return;
        }

        try {
            serverPort = parseInt(PORTTextField.getText());
            serverPortServer = parseInt(SERVERPORTTextField.getText());
            serverPortMonitor = parseInt(MONITORPORTTextField.getText());
        } catch (NumberFormatException ex) {
            Logger.getLogger(LoadBalancer.class.getName()).log(Level.SEVERE, null, ex);
            STATUSLabel.setForeground(Color.red);
            STATUSLabel.setText("Error Creating Server :/");
            STATUSLabel.setVisible(true);
            return;
        }

        SwingWorker worker = new SwingWorker<Boolean, Integer>() {

            @Override
            protected Boolean doInBackground() throws Exception {
                {
                    ServerSocket serverSocket = null;
                    try {
                        serverSocket = new ServerSocket(serverPortServer);
                    } catch (IOException ex) {
                        Logger.getLogger(LoadBalancer.class.getName()).log(Level.SEVERE, null, ex);
                        STATUSLabel.setForeground(Color.red);
                        STATUSLabel.setText("Error Creating Server :/");
                        STATUSLabel.setVisible(true);
                        return false;
                    }

                    STATUSLabel.setForeground(new java.awt.Color(0, 100, 0));
                    STATUSLabel.setText("ONLINE!");
                    STATUSLabel.setVisible(true);

                    while (true) {
                        Socket s2 = null;
                        try {
                            s2 = serverSocket.accept();
                        } catch (IOException ex) {
                            Logger.getLogger(LoadBalancer.class.getName()).log(Level.SEVERE, null, ex);
                            System.exit(1);
                        }


                        InputStream inputStream2 = null;
                        try {
                            inputStream2 = s2.getInputStream();
                        } catch (IOException ex) {
                            Logger.getLogger(LoadBalancer.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        DataInputStream dataInputStream2 = new DataInputStream(inputStream2);
                        OutputStream outputStream = s2.getOutputStream();
                        DataOutputStream dataOutputStream = new DataOutputStream(outputStream);
                        try {
                            String str = dataInputStream2.readUTF();
                            if ("ImAliveServer".equals(str)) {
                                System.out.println("Sending new Server ID->" + numberOfServers);
                                dataOutputStream.writeUTF(String.valueOf(numberOfServers) + ";Server");
                                dataOutputStream.flush();

                                allServerSocketsConnected.put(numberOfServers, s2);
                                allRequestsOnEachServer.put(numberOfServers, new ArrayList<String>());
                                LoadBalancerRequestReceiver receiveRequests = new LoadBalancerRequestReceiver(allClientsSocketsConnected, s2, allRequestsOnEachServer);
                                receiveRequests.start();
                                StringBuilder newTextArea = new StringBuilder();
                                allServerSocketsConnected.keySet().forEach(key -> {
                                    newTextArea.append("Server ID:")
                                            .append(key)
                                            .append(" = ")
                                            .append(allServerSocketsConnected.get(key))
                                            .append("\n");
                                });
                                SERVERSTEXTAREA.setText(newTextArea.toString());
                                numberOfServers++;
                                nServers.setText(String.valueOf(numberOfServers));

                            } else if ("ImAliveClient".equals(str) || "ImAliveMonitor".equals(str)) {
                                System.out.println("CLIENT TRIED TO ENTER PORT SERVER");
                                dataOutputStream.writeUTF("999;Server");
                                dataOutputStream.flush();
                            } else {
                                System.out.println("error");
                            }

                        } catch (IOException ex) {
                            Logger.getLogger(LoadBalancer.class.getName()).log(Level.INFO, null, ex);
                            try {
                                s2.close();
                            } catch (IOException ex1) {
                                Logger.getLogger(LoadBalancer.class.getName()).log(Level.SEVERE, null, ex1);
                            }
                        }
                    }
                }
            }

            protected void process(Integer chunks) {
            }

            @Override
            protected void done() {
                System.out.println("Done");
            }
        };
        worker.execute();

        //CLIENT
        SwingWorker workerServer = new SwingWorker<Boolean, Integer>() {

            @Override
            protected Boolean doInBackground() throws Exception {
                {
                    ServerSocket serverSocket = null;
                    try {
                        serverSocket = new ServerSocket(serverPort);
                    } catch (IOException ex) {
                        Logger.getLogger(LoadBalancer.class.getName()).log(Level.SEVERE, null, ex);
                        STATUSLabel.setForeground(Color.red);
                        STATUSLabel.setText("Error Creating Server :/");
                        STATUSLabel.setVisible(true);
                        return false;
                    }

                    STATUSLabel.setForeground(new java.awt.Color(0, 100, 0));
                    STATUSLabel.setText("ONLINE!");
                    STATUSLabel.setVisible(true);

                    while (true) {
                        Socket s2 = null;
                        try {
                            s2 = serverSocket.accept();
                            serverSocketClient = s2;
                        } catch (IOException ex) {
                            Logger.getLogger(LoadBalancer.class.getName()).log(Level.SEVERE, null, ex);
                            System.exit(1);
                        }

                        InputStream inputStream2 = null;
                        try {
                            inputStream2 = s2.getInputStream();
                        } catch (IOException ex) {
                            Logger.getLogger(LoadBalancer.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        DataInputStream dataInputStream2 = new DataInputStream(inputStream2);
                        OutputStream outputStream = s2.getOutputStream();
                        DataOutputStream dataOutputStream = new DataOutputStream(outputStream);
                        try {
                            String str = dataInputStream2.readUTF();
                            if ("ImAliveClient".equals(str)) {
                                System.out.println("Sending new Client ID->" + numberOfClients);

                                dataOutputStream.writeUTF(String.valueOf(numberOfClients) + ";Client");
                                allClientsSocketsConnected.put(numberOfClients, s2);
                                StringBuilder newTextArea = new StringBuilder();
                                allClientsSocketsConnected.keySet().forEach(key -> {
                                    newTextArea.append("Client ID:")
                                            .append(key)
                                            .append(" = ")
                                            .append(allClientsSocketsConnected.get(key))
                                            .append("\n");
                                });
                                CLIENTSTEXTAREA.setText(newTextArea.toString());
                                numberOfClients++;
                                nClients.setText(String.valueOf(numberOfClients));
                            } else if ("ImAliveServer".equals(str) || "ImAliveMonitor".equals(str)) {
                                System.out.println("SERVER TRIED TO ENTER CLIENT");
                                dataOutputStream.writeUTF("999;Client");
                                dataOutputStream.flush();
                            } else {
                                System.out.println("else- " + str);
                                LoadBalancerRequest loadBalancerRequest = new LoadBalancerRequest(str, allServerSocketsConnected, serverSocketMonitor, allClientsSocketsConnected, allRequestsOnEachServer, 9999999);
                                loadBalancerRequest.start();
                            }

                        } catch (IOException ex) {
                            Logger.getLogger(LoadBalancer.class.getName()).log(Level.INFO, null, ex);
                            
                            try {
                                s2.close();

                            } catch (IOException ex1) {
                                Logger.getLogger(LoadBalancer.class.getName()).log(Level.SEVERE, null, ex1);
                            }
                        }
                    }
                }
            }

            protected void process(Integer chunks) {
            }

            @Override
            protected void done() {
                System.out.println("Done");
            }
        };
        workerServer.execute();

        //MONITOR
        SwingWorker workerServer3 = new SwingWorker<Boolean, Integer>() {

            @Override
            protected Boolean doInBackground() throws Exception {
                {
                    ServerSocket serverSocket = null;
                    try {
                        serverSocket = new ServerSocket(serverPortMonitor);
                    } catch (IOException ex) {
                        Logger.getLogger(LoadBalancer.class.getName()).log(Level.SEVERE, null, ex);
                        STATUSLabel.setForeground(Color.red);
                        STATUSLabel.setText("Error Creating Server :/");
                        STATUSLabel.setVisible(true);
                        return false;
                    }

                    STATUSLabel.setForeground(new java.awt.Color(0, 100, 0));
                    STATUSLabel.setText("ONLINE!");
                    STATUSLabel.setVisible(true);

                    while (true) {
                        Socket s2 = null;
                        try {
                            s2 = serverSocket.accept();
                            if (serverSocketMonitor == null) {
                                serverSocketMonitor = s2;
                            }
                        } catch (IOException ex) {
                            Logger.getLogger(LoadBalancer.class.getName()).log(Level.SEVERE, null, ex);
                            System.exit(1);
                        }

                        InputStream inputStream2 = null;
                        try {
                            inputStream2 = s2.getInputStream();
                        } catch (IOException ex) {
                            Logger.getLogger(LoadBalancer.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        DataInputStream dataInputStream2 = new DataInputStream(inputStream2);
                        OutputStream outputStream = s2.getOutputStream();
                        DataOutputStream dataOutputStream = new DataOutputStream(outputStream);
                        try {
                            String str = dataInputStream2.readUTF();
                            if ("ImAliveMonitor".equals(str)) {
                                System.out.println("Sending new Monitor ID->" + 999);
                                System.out.println(s2);
                                dataOutputStream.writeUTF("999;Monitor");
                            } else if ("ImAliveServer".equals(str) || "ImAliveClient".equals(str)) {
                                System.out.println("SERVER TRIED TO ENTER CLIENT");
                                dataOutputStream.writeUTF("999;Client");
                                dataOutputStream.flush();
                            } else if (str.contains("Dead;")) {

                                String[] arrOfStr = str.split(";", -2);
                                System.out.println("LB_MONITOR-> THIS SERVER DIED->" + arrOfStr[1]);
                                allServerSocketsConnected.remove(parseInt(arrOfStr[1]));
                                allServerReceiverThreads.remove(parseInt(arrOfStr[1]));
                                StringBuilder newTextArea = new StringBuilder();
                                nServers.setText(String.valueOf(allServerSocketsConnected.size()));
                                allServerSocketsConnected.keySet().forEach(key -> {
                                    newTextArea.append("Server ID:")
                                            .append(key)
                                            .append(" = ")
                                            .append(allServerSocketsConnected.get(key))
                                            .append("\n");
                                });
                                SERVERSTEXTAREA.setText(newTextArea.toString());

                                //in case the server had work
                                ArrayList<String> temporaryRequests = new ArrayList<>();
                                if (!allRequestsOnEachServer.get(parseInt(arrOfStr[1])).isEmpty()) {
                                    for (int i = 0; i < allRequestsOnEachServer.get(parseInt(arrOfStr[1])).size(); i++) {
                                        temporaryRequests.add(allRequestsOnEachServer.get(parseInt(arrOfStr[1])).get(i).toString());
                                    }
                                }
                                allRequestsOnEachServer.remove(parseInt(arrOfStr[1]));
                                
                                //get All keys

                                ArrayList<Integer> servers = new ArrayList<>();
                                allServerSocketsConnected.keySet().forEach(key -> {
                                    servers.add(key);
                                });
                                
                                int distribute = 0;
                                for (int i = 0; i < temporaryRequests.size(); i++) {
                                    if(distribute >= servers.size())
                                    {
                                        distribute = 0;
                                    }
                                    LoadBalancerRequest loadBalancerRequest = new LoadBalancerRequest(temporaryRequests.get(i), allServerSocketsConnected, serverSocketMonitor, allClientsSocketsConnected, allRequestsOnEachServer,servers.get(distribute));
                                    loadBalancerRequest.start();
                                    distribute++;
                                }
                            }

                        } catch (IOException ex) {
                            Logger.getLogger(LoadBalancer.class.getName()).log(Level.INFO, null, ex);
                            try {
                                s2.close();
                            } catch (IOException ex1) {
                                Logger.getLogger(LoadBalancer.class.getName()).log(Level.SEVERE, null, ex1);
                            }
                        }
                    }
                }
            }

            protected void process(Integer chunks) {
            }

            @Override
            protected void done() {
                System.out.println("Done");
            }
        };
        workerServer3.execute();
    }//GEN-LAST:event_connectBTNActionPerformed

    private void helpBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpBtnActionPerformed
        if(click == 0){            
            helpTXT.setVisible(true);
            helpTXT2.setVisible(true);
            helpTXT3.setVisible(true);
            helpTXT4.setVisible(true);
            click++;
        }else{ 
            helpTXT.setVisible(false);
            helpTXT2.setVisible(false);
            helpTXT3.setVisible(false);
            helpTXT4.setVisible(false);
            click = 0;
        }
    }//GEN-LAST:event_helpBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoadBalancer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoadBalancer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoadBalancer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoadBalancer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new LoadBalancer().setVisible(true);
            } catch (IOException ex) {
                Logger.getLogger(LoadBalancer.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea CLIENTSTEXTAREA;
    private javax.swing.JTextField MONITORPORTTextField;
    private javax.swing.JTextField PORTTextField;
    private javax.swing.JTextField SERVERPORTTextField;
    private javax.swing.JTextArea SERVERSTEXTAREA;
    private javax.swing.JLabel STATUSLabel;
    private javax.swing.JButton connectBTN;
    private javax.swing.JButton helpBtn;
    private javax.swing.JLabel helpTXT;
    private javax.swing.JLabel helpTXT2;
    private javax.swing.JLabel helpTXT3;
    private javax.swing.JLabel helpTXT4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel nClients;
    private javax.swing.JLabel nServers;
    // End of variables declaration//GEN-END:variables
}
