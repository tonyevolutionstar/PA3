package UC.LoadBalancer;

import UC.Client.Client;
import java.awt.Color;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import static java.lang.Integer.parseInt;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingWorker;


public class LoadBalancer extends javax.swing.JFrame {
    
              
    private int numberOfClients = 0;
    private int numberOfServers = 0;
    private int serverPort;
    private int serverPortServer;
    private Socket serverSocketServer;
    private Socket serverSocketClient; 
    
    public LoadBalancer() throws IOException {
        initComponents();
        STATUSLabel.setVisible(false);   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        PORTTextField = new javax.swing.JTextField();
        STATUSLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        SERVERPORTTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("LoadBalancer");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Client Port:");

        PORTTextField.setText("7777");

        STATUSLabel.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        STATUSLabel.setForeground(new java.awt.Color(0, 100, 0));
        STATUSLabel.setText("Online");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Server Port:");

        SERVERPORTTextField.setText("9999");
        SERVERPORTTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SERVERPORTTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(SERVERPORTTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(STATUSLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(PORTTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(40, 40, 40))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(PORTTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(2, 2, 2)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(SERVERPORTTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(STATUSLabel))
                .addContainerGap(204, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

          if(serverSocketClient != null)
          {
              return;
          }
          
         try {
            serverPort = parseInt(PORTTextField.getText());   
            serverPortServer = parseInt(SERVERPORTTextField.getText());
          } catch (NumberFormatException ex) {
            Logger.getLogger(LoadBalancer.class.getName()).log(Level.SEVERE, null, ex);
            STATUSLabel.setForeground(Color.red);
            STATUSLabel.setText("Error Creating Server :/");
            STATUSLabel.setVisible(true); 
            return;
          }
        
          SwingWorker worker = new SwingWorker<Boolean, Integer>() {

          @Override
          protected Boolean doInBackground() throws Exception {
              {      
                ServerSocket serverSocket = null;
                try {
                    serverSocket = new ServerSocket(serverPortServer);  
                } catch (IOException ex) {
                    Logger.getLogger(LoadBalancer.class.getName()).log(Level.SEVERE, null, ex);
                    STATUSLabel.setForeground(Color.red);
                    STATUSLabel.setText("Error Creating Server :/");
                    STATUSLabel.setVisible(true); 
                    return false;
                }
                
                STATUSLabel.setForeground(new java.awt.Color(0, 100, 0));
                STATUSLabel.setText("ONLINE!");
                STATUSLabel.setVisible(true);                
                
                
                while(true)
                {
                    Socket s2 = null;
                    try {
                        System.out.println("Preso1");
                        s2 = serverSocket.accept();
                        System.out.println("Preso2");                        
                    } catch (IOException ex) {
                        Logger.getLogger(LoadBalancer.class.getName()).log(Level.SEVERE, null, ex);
                        System.exit(1);
                    }

                    InputStream inputStream2 = null;
                    try {
                                                System.out.println("Preso3");
                        inputStream2 = s2.getInputStream();
                    } catch (IOException ex) {
                        Logger.getLogger(LoadBalancer.class.getName()).log(Level.SEVERE, null, ex);
                    }
                        System.out.println("Preso4");
                    DataInputStream dataInputStream2 = new DataInputStream(inputStream2);
                                            System.out.println("Preso5");
                    OutputStream outputStream = s2.getOutputStream();
                                            System.out.println("Preso6");
                    DataOutputStream dataOutputStream = new DataOutputStream(outputStream);
                                            System.out.println("Preso7");
                    try {  
                        String str = dataInputStream2.readUTF();                         
                        if("ImAliveServer".equals(str))
                        {
                            System.out.println("Sending new Server ID->"+numberOfServers);
                            dataOutputStream.writeUTF(String.valueOf(numberOfServers)+";Server");
                            dataOutputStream.flush();
                            serverSocketServer = s2;                            
                            numberOfServers++;
                        }
                        else if("ImAliveClient".equals(str))
                        {
                            System.out.println("CLIENT TRIED TO ENTER PORT SERVER");
                            dataOutputStream.writeUTF("999;Server");
                            dataOutputStream.flush();                            
                        }
                        else
                        {
                            //Escolher melhor Servidor para enviar info
                            System.out.println("LOAD_BALANCER_RECEIVED->"+str);
                            OutputStream outputStreamClient = serverSocketClient.getOutputStream();
                            DataOutputStream dataOutputStreamClient = new DataOutputStream(outputStreamClient);
                            dataOutputStreamClient.writeUTF(str);
 
                        }       
                 

                    } catch (IOException ex) {
                        Logger.getLogger(LoadBalancer.class.getName()).log(Level.INFO, null, ex);
                        try {
                            s2.close();
                        } catch (IOException ex1) {
                            Logger.getLogger(LoadBalancer.class.getName()).log(Level.SEVERE, null, ex1);
                        }
                    }
                }  
            }
          }

          protected void process(Integer chunks) {
          }

          @Override
          protected void done() {
            System.out.println("Done");
          }
        };
        worker.execute();
        
        SwingWorker workerServer = new SwingWorker<Boolean, Integer>() {

          @Override
          protected Boolean doInBackground() throws Exception {
              {      
                ServerSocket serverSocket = null;
                try {
                    serverSocket = new ServerSocket(serverPort);       
                } catch (IOException ex) {
                    Logger.getLogger(LoadBalancer.class.getName()).log(Level.SEVERE, null, ex);
                    STATUSLabel.setForeground(Color.red);
                    STATUSLabel.setText("Error Creating Server :/");
                    STATUSLabel.setVisible(true); 
                    return false;
                }
                
                STATUSLabel.setForeground(new java.awt.Color(0, 100, 0));
                STATUSLabel.setText("ONLINE!");
                STATUSLabel.setVisible(true);                
                
                
                while(true)
                {
                    Socket s2 = null;
                    try {
                        s2 = serverSocket.accept(); 
                        serverSocketClient = s2;                        
                    } catch (IOException ex) {
                        Logger.getLogger(LoadBalancer.class.getName()).log(Level.SEVERE, null, ex);
                        System.exit(1);
                    }

                    InputStream inputStream2 = null;
                    try {
                        inputStream2 = s2.getInputStream();
                    } catch (IOException ex) {
                        Logger.getLogger(LoadBalancer.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    DataInputStream dataInputStream2 = new DataInputStream(inputStream2);
                    OutputStream outputStream = s2.getOutputStream();
                    DataOutputStream dataOutputStream = new DataOutputStream(outputStream);
                    try {  
                        String str = dataInputStream2.readUTF();               
                        if("ImAliveClient".equals(str))
                        {
                            System.out.println("Sending new Client ID->"+numberOfClients);
                            dataOutputStream.writeUTF(String.valueOf(numberOfClients)+";Client");                              
                            numberOfClients++;
                        }
                        else if("ImAliveServer".equals(str))
                        {
                            System.out.println("SERVER TRIED TO ENTER CLIENT");
                            dataOutputStream.writeUTF("999;Client");
                            dataOutputStream.flush();                            
                        }                        
                        else
                        {
                            //Escolher melhor Servidor para enviar info
                            System.out.println("else- "+str);
                            LoadBalancerRequest loadBalancerRequest = new LoadBalancerRequest(str,serverSocketServer,serverSocketClient); 
                            loadBalancerRequest.run();
                           
                        }

                    } catch (IOException ex) {
                        Logger.getLogger(LoadBalancer.class.getName()).log(Level.INFO, null, ex);
                        try {
                            s2.close();
                        } catch (IOException ex1) {
                            Logger.getLogger(LoadBalancer.class.getName()).log(Level.SEVERE, null, ex1);
                        }
                    }
                }  
            }
          }

          protected void process(Integer chunks) {
          }

          @Override
          protected void done() {
            System.out.println("Done");
          }
        };
        workerServer.execute();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void SERVERPORTTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SERVERPORTTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SERVERPORTTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoadBalancer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoadBalancer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoadBalancer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoadBalancer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new LoadBalancer().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(LoadBalancer.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField PORTTextField;
    private javax.swing.JTextField SERVERPORTTextField;
    private javax.swing.JLabel STATUSLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
